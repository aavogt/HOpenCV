-- GENERATED by C->Haskell Compiler, version 0.16.0 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "HOpenCV.chs" #-}{-# LANGUAGE ForeignFunctionInterface #-}


module HOpenCV where 

import Foreign.C.Types
import Foreign.Ptr
import Foreign.Storable

import C2HS


type IplImage = Ptr (())
{-# LINE 14 "HOpenCV.chs" #-}
type CvCapture = Ptr (())
{-# LINE 15 "HOpenCV.chs" #-}


newCapture :: Int -> IO (CvCapture)
newCapture a1 =
  let {a1' = fromIntegral a1} in 
  newCapture'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 19 "HOpenCV.chs" #-}

delCapture :: CvCapture -> IO (())
delCapture a1 =
  let {a1' = id a1} in 
  delCapture'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 22 "HOpenCV.chs" #-}

queryFrame :: CvCapture -> IO (IplImage)
queryFrame a1 =
  let {a1' = id a1} in 
  queryFrame'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 25 "HOpenCV.chs" #-}

newWindow :: Int -> Int -> IO (())
newWindow a1 a2 =
  let {a1' = fromIntegral a1} in 
  let {a2' = fromIntegral a2} in 
  newWindow'_ a1' a2' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 28 "HOpenCV.chs" #-}

delWindow :: Int -> IO (())
delWindow a1 =
  let {a1' = fromIntegral a1} in 
  delWindow'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 31 "HOpenCV.chs" #-}

showImage :: Int -> IplImage -> IO (())
showImage a1 a2 =
  let {a1' = fromIntegral a1} in 
  let {a2' = id a2} in 
  showImage'_ a1' a2' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 34 "HOpenCV.chs" #-}

waitKey :: Int -> IO (())
waitKey a1 =
  let {a1' = fromIntegral a1} in 
  waitKey'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 37 "HOpenCV.chs" #-}

cloneImage :: IplImage -> IO (IplImage)
cloneImage a1 =
  let {a1' = id a1} in 
  cloneImage'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 40 "HOpenCV.chs" #-}

delImage :: IplImage -> IO (())
delImage a1 =
  let {a1' = id a1} in 
  delImage'_ a1' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 43 "HOpenCV.chs" #-}

dilate :: IplImage -> Int -> IplImage -> IO (())
dilate a1 a2 a3 =
  let {a1' = id a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = id a3} in 
  dilate'_ a1' a2' a3' >>= \res ->
  let {res' = id res} in
  return (res')
{-# LINE 46 "HOpenCV.chs" #-}


foreign import ccall safe "HOpenCV.chs.h new_capture"
  newCapture'_ :: (CInt -> (IO (CvCapture)))

foreign import ccall safe "HOpenCV.chs.h del_capture"
  delCapture'_ :: ((CvCapture) -> (IO ()))

foreign import ccall safe "HOpenCV.chs.h query_frame"
  queryFrame'_ :: ((CvCapture) -> (IO (IplImage)))

foreign import ccall safe "HOpenCV.chs.h new_window"
  newWindow'_ :: (CInt -> (CInt -> (IO ())))

foreign import ccall safe "HOpenCV.chs.h del_window"
  delWindow'_ :: (CInt -> (IO ()))

foreign import ccall safe "HOpenCV.chs.h show_image"
  showImage'_ :: (CInt -> ((IplImage) -> (IO ())))

foreign import ccall safe "HOpenCV.chs.h wait_key"
  waitKey'_ :: (CInt -> (IO ()))

foreign import ccall safe "HOpenCV.chs.h clone_image"
  cloneImage'_ :: ((IplImage) -> (IO (IplImage)))

foreign import ccall safe "HOpenCV.chs.h del_image"
  delImage'_ :: ((IplImage) -> (IO ()))

foreign import ccall safe "HOpenCV.chs.h dilate"
  dilate'_ :: ((IplImage) -> (CInt -> ((IplImage) -> (IO ()))))
